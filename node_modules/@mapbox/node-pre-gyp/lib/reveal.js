'use strict';

module.exports = exports = reveal;
exports.usage = 'Reveals data on the versioned binary';

const versioning = require('./util/versioning.js');
const napi = require('./util/napi.js');

function unixPaths(key, val) {
  return val && val.replace ? val.replace(/\\/g, '/') : val;
}

function reveal(gyp, argv, callback) {
  const packageJson = gyp.package_json;
  const napiBuildVersion = napi.getNapiBuildVersionFromCommandArgs(argv);
  const opts = versioning.evaluate(packageJson, gyp.opts, napiBuildVersion);
  let hit = false;

  // if a second arg is passed, look to see if it is a known option
  const remain = gyp.opts.argv.remain[gyp.opts.argv.remain.length - 1];

  if (remain && Object.prototype.hasOwnProperty.call(opts, remain)) {
    console.log(opts[remain].replace(/\\/g, '/'));
    hit = true;
  }

  // otherwise, return all options as JSON
  if (!hit) {
    console.log(JSON.stringify(opts, unixPaths, 2));
  }

  return callback();
}

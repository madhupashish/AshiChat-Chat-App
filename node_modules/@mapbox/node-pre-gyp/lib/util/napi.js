'use strict';

const fs = require('fs');
const path = require('path');
const log = require('npmlog');
const rimraf = require('rimraf');

module.exports = exports = handleGypOpts;

const versionArray = process.version
  .substr(1)
  .replace(/-.*$/, '')
  .split('.')
  .map((item) => +item);

const napiMultipleCommands = [
  'build',
  'clean',
  'configure',
  'package',
  'publish',
  'reveal',
  'testbinary',
  'testpackage',
  'unpublish'
];

const napiBuildVersionTag = 'napi_build_version=';

function handleGypOpts(gyp, argv, callback) {
  // Your existing code for handleGypOpts
}

module.exports.getNapiVersion = function () {
  // Your existing code for getNapiVersion
};

module.exports.getNapiVersionAsString = function (target) {
  // Your existing code for getNapiVersionAsString
};

module.exports.validatePackageJson = function (packageJson, opts) {
  // Your existing code for validatePackageJson
};

function pathOK(path) {
  return path && (path.includes('{napi_build_version}') || path.includes('{node_napi_label}'));
}

module.exports.expandCommands = function (packageJson, opts, commands) {
  // Your existing code for expandCommands
};

module.exports.getNapiBuildVersions = function (packageJson, opts, warnings) {
  // Your existing code for getNapiBuildVersions
};

module.exports.getNapiBuildVersionsRaw = function (packageJson) {
  // Your existing code for getNapiBuildVersionsRaw
};

module.exports.getCommandArg = function (napiBuildVersion) {
  return `${napiBuildVersionTag}${napiBuildVersion}`;
};

module.exports.getNapiBuildVersionFromCommandArgs = function (commandArgs) {
  // Your existing code for getNapiBuildVersionFromCommandArgs
};

module.exports.swapBuildDirOut = function (napiBuildVersion) {
  // Your existing code for swapBuildDirOut
};

module.exports.swapBuildDirIn = function (napiBuildVersion) {
  // Your existing code for swapBuildDirIn
};

module.exports.getBuildDir = function (napiBuildVersion) {
  return `build-tmp-napi-v${napiBuildVersion}`;
};

module.exports.getBestNapiBuildVersion = function (packageJson, opts) {
  // Your existing code for getBestNapiBuildVersion
};

module.exports.buildNapiOnly = function (packageJson) {
  // Your existing code for buildNapiOnly
};

'use strict';

const fs = require('fs');
const path = require('path');
const { spawn } = require('child_process');

const isWindows = process.platform === 'win32';
const existsSync = fs.existsSync || path.existsSync;

function findNodeGypPath() {
  if (process.env.npm_config_node_gyp && existsSync(process.env.npm_config_node_gyp)) {
    return process.env.npm_config_node_gyp;
  }

  try {
    const nodeGypMain = require.resolve('node-gyp');
    return path.join(path.dirname(path.dirname(nodeGypMain)), 'bin/node-gyp.js');
  } catch (err) {
    // do nothing
  }

  if (process.execPath.indexOf('iojs') === -1) {
    try {
      const npmMain = require.resolve('npm');
      return path.join(path.dirname(path.dirname(npmMain)), 'node_modules/node-gyp/bin/node-gyp.js');
    } catch (err) {
      // do nothing
    }
  }

  const npmBase = path.join(path.dirname(path.dirname(process.execPath)), 'lib/node_modules/npm/');
  return path.join(npmBase, 'node_modules/node-gyp/bin/node-gyp.js');
}

module.exports.runGyp = function (args, opts, callback) {
  let shellCmd = '';
  const cmdArgs = [];

  if (opts.runtime && opts.runtime === 'node-webkit') {
    shellCmd = 'nw-gyp';
    if (isWindows) shellCmd += '.cmd';
  } else {
    const nodeGypPath = findNodeGypPath();
    shellCmd = nodeGypPath ? process.execPath : 'node-gyp';
    if (isWindows) shellCmd += '.cmd';

    if (nodeGypPath) {
      cmdArgs.push(nodeGypPath);
    }
  }

  const finalArgs = cmdArgs.concat(args);
  const cmd = spawn(shellCmd, finalArgs, { cwd: undefined, env: process.env, stdio: [0, 1, 2] });

  cmd.on('error', (err) => {
    if (err) {
      callback(new Error(`Failed to execute '${shellCmd} ${finalArgs.join(' ')}' (${err})`));
    } else {
      callback(null, opts);
    }
  });

  cmd.on('close', (code) => {
    if (code && code !== 0) {
      callback(new Error(`Failed to execute '${shellCmd} ${finalArgs.join(' ')}' (${code})`));
    } else {
      callback(null, opts);
    }
  });
};

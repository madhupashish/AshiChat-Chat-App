'use strict';

module.exports = exports = unpublish;
exports.usage = 'Unpublishes pre-built binary (requires aws-sdk)';

const log = require('npmlog');
const versioning = require('./util/versioning.js');
const napi = require('./util/napi.js');
const s3Setup = require('./util/s3_setup.js');
const url = require('url');

function unpublish(gyp, argv, callback) {
  const packageJson = gyp.package_json;
  const napiBuildVersion = napi.getNapiBuildVersionFromCommandArgs(argv);
  const opts = versioning.evaluate(packageJson, gyp.opts, napiBuildVersion);
  const config = {};
  s3Setup.detect(opts, config);
  const s3 = s3Setup.getS3(config);
  const keyName = url.resolve(config.prefix, opts.packageName);
  const s3Opts = {
    Bucket: config.bucket,
    Key: keyName
  };

  s3.headObject(s3Opts, (err, meta) => {
    if (err && err.code === 'NotFound') {
      console.log('[' + packageJson.name + '] Not found: https://' + s3Opts.Bucket + '.s3.amazonaws.com/' + s3Opts.Key);
      return callback();
    } else if (err) {
      return callback(err);
    } else {
      log.info('unpublish', JSON.stringify(meta));
      s3.deleteObject(s3Opts, (err2, resp) => {
        if (err2) return callback(err2);
        log.info(JSON.stringify(resp));
        console.log('[' + packageJson.name + '] Success: removed https://' + s3Opts.Bucket + '.s3.amazonaws.com/' + s3Opts.Key);
        return callback();
      });
    }
  });
}

'use strict';

module.exports = exports = clean;
exports.usage = 'Removes the entire folder containing the compiled .node module';

const rimraf = require('rimraf');
const fs = require('fs');
const path = require('path');
const versioning = require('./util/versioning.js');
const napi = require('./util/napi.js');

function clean(gyp, argv, callback) {
  const packageJson = gyp.package_json;
  const napiBuildVersion = napi.get_napi_build_version_from_command_args(argv);
  const opts = versioning.evaluate(packageJson, gyp.opts, napiBuildVersion);
  const toDelete = opts.module_path;

  if (!toDelete) {
    return callback(new Error('module_path is empty, refusing to delete'));
  }

  if (path.normalize(toDelete) === path.normalize(process.cwd())) {
    return callback(new Error('module_path is not set, refusing to delete'));
  }

  fs.exists(toDelete, (found) => {
    if (found) {
      if (!gyp.opts.silent_clean) {
        console.log('[' + packageJson.name + '] Removing "%s"', toDelete);
      }
      return rimraf(toDelete, callback);
    }
    return callback();
  });
}

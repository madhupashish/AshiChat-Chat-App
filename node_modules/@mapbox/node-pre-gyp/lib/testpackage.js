'use strict';

module.exports = exports = testPackage;
exports.usage = 'Tests that the staged package is valid';

const fs = require('fs');
const path = require('path');
const log = require('npmlog');
const existsAsync = fs.exists || path.exists;
const versioning = require('./util/versioning.js');
const napi = require('./util/napi.js');
const testBinary = require('./testbinary.js');
const tar = require('tar');
const makeDir = require('make-dir');

function testPackage(gyp, argv, callback) {
  const packageJson = gyp.package_json;
  const napiBuildVersion = napi.getNapiBuildVersionFromCommandArgs(argv);
  const opts = versioning.evaluate(packageJson, gyp.opts, napiBuildVersion);
  const tarball = opts.stagedTarball;

  existsAsync(tarball, (found) => {
    if (!found) {
      return callback(new Error('Cannot test package because ' + tarball + ' is missing: run `node-pre-gyp package` first'));
    }

    const to = opts.modulePath;

    function filterFunc(entry) {
      log.info('install', 'unpacking [' + entry.path + ']');
    }

    makeDir(to)
      .then(() => {
        return tar.extract({
          file: tarball,
          cwd: to,
          strip: 1,
          onentry: filterFunc
        });
      })
      .then(afterExtract)
      .catch((err) => {
        return callback(err);
      });

    function afterExtract() {
      testBinary(gyp, argv, (err) => {
        if (err) {
          return callback(err);
        } else {
          console.log('[' + packageJson.name + '] Package appears valid');
          return callback();
        }
      });
    }
  });
}
